From 8794edab7b8a1ac5c67ac52dac43699d66e08938 Mon Sep 17 00:00:00 2001
From: Lionel Landwerlin <llandwerlin@gmail.com>
Date: Thu, 9 Aug 2012 14:23:50 +0100
Subject: [PATCH 5/5] websocket: make reading more robust

---
 libsoup/soup-websocket.c |   79 +++++++++++++++++++---------------------------
 1 file changed, 33 insertions(+), 46 deletions(-)

diff --git a/libsoup/soup-websocket.c b/libsoup/soup-websocket.c
index d42a15a..8c1b2b0 100644
--- a/libsoup/soup-websocket.c
+++ b/libsoup/soup-websocket.c
@@ -382,8 +382,7 @@ read_payload (SoupWebsocket *socket)
       else
         {
           /* TODO: fragmented frame, not supported yet */
-          priv->state = SOUP_WEBSOCKET_STATE_CLOSED;
-          /* g_io_stream_close (G_IO_STREAM (priv->conn), NULL, NULL); */
+          soup_connection_disconnect (priv->connection);
         }
     }
 
@@ -452,7 +451,7 @@ process_data (SoupWebsocket *socket)
           break;
 
         case SOUP_WEBSOCKET_FRAME_STATE_READING_ERROR:
-          priv->state = SOUP_WEBSOCKET_STATE_CLOSED;
+          soup_connection_disconnect (priv->connection);
           return FALSE;
         }
     }
@@ -480,8 +479,12 @@ read_data_stream (SoupWebsocket *socket)
 
   if (myerror)
     {
-      g_warning ("read data error : %s", myerror->message);
-      g_error_free (myerror);
+      if (!g_error_matches (myerror, G_IO_ERROR, G_IO_ERROR_WOULD_BLOCK))
+        {
+          g_warning ("read data error : %s", myerror->message);
+          g_error_free (myerror);
+          return FALSE;
+        }
       return FALSE;
     }
 
@@ -713,7 +716,6 @@ got_read_data (GIOChannel *source,
       break;
 
     case SOUP_WEBSOCKET_STATE_CLOSED:
-      _soup_websocket_disconnect (socket);
       return G_SOURCE_REMOVE;
     }
 
@@ -741,31 +743,35 @@ got_write_data_handshake (SoupWebsocket *socket)
                                                     priv->hs_str->len - priv->hs_offset,
                                                     NULL, &myerror);
 
-      if (myerror) {
-        if (!g_error_matches (myerror, G_IO_ERROR, G_IO_ERROR_WOULD_BLOCK))
-          {
-            g_error_free (myerror);
-            return G_SOURCE_REMOVE;
-          }
+      if (myerror)
+        {
+          if (!g_error_matches (myerror, G_IO_ERROR, G_IO_ERROR_WOULD_BLOCK))
+            {
+              g_error_free (myerror);
+              return G_SOURCE_REMOVE;
+            }
 
-        g_error_free (myerror);
+          g_error_free (myerror);
 
-        return G_SOURCE_CONTINUE;
-      }
+          return G_SOURCE_CONTINUE;
+        }
 
-      if (nwrote >= 0)
+      if (nwrote < 0)
         {
-          priv->hs_offset += nwrote;
-          if (priv->hs_offset >= priv->hs_str->len)
-            {
-              g_message ("wrote all headers");
-              g_string_free (priv->hs_str, TRUE);
-              priv->hs_str = NULL;
-              priv->hs_state = SOUP_WEBSOCKET_HANDSHAKE_STATE_SERVER_HEADERS;
+          soup_connection_disconnect (priv->connection);
+          return G_SOURCE_REMOVE;
+        }
 
-              g_source_destroy (priv->write_source);
-              priv->write_source = NULL;
-            }
+      priv->hs_offset += nwrote;
+      if (priv->hs_offset >= priv->hs_str->len)
+        {
+          g_message ("wrote all headers");
+          g_string_free (priv->hs_str, TRUE);
+          priv->hs_str = NULL;
+          priv->hs_state = SOUP_WEBSOCKET_HANDSHAKE_STATE_SERVER_HEADERS;
+
+          g_source_destroy (priv->write_source);
+          priv->write_source = NULL;
         }
       break;
 
@@ -795,7 +801,6 @@ got_write_data (GIOChannel *source,
       break;
 
     case SOUP_WEBSOCKET_STATE_CLOSED:
-      _soup_websocket_disconnect (socket);
       return G_SOURCE_REMOVE;
     }
 
@@ -805,12 +810,6 @@ got_write_data (GIOChannel *source,
 /**/
 
 static void
-got_socket_disconnected (SoupSocket *ssocket, SoupWebsocket *socket)
-{
-  g_message ("SOCKET DISCONNECTED!!!!");
-}
-
-static void
 got_connection (SoupConnection *conn, guint status, SoupWebsocket *socket)
 {
   SoupWebsocketPrivate *priv = socket->priv;
@@ -830,8 +829,6 @@ got_connection (SoupConnection *conn, guint status, SoupWebsocket *socket)
   async_context = g_main_context_default ();
 
   ssocket = soup_connection_get_socket (priv->connection);
-  g_signal_connect (ssocket, "disconnected",
-                    G_CALLBACK (got_socket_disconnected), socket);
 
   iostream = soup_socket_get_iostream (ssocket);
 
@@ -892,6 +889,7 @@ build_handshake (SoupWebsocket *socket, SoupURI *uri)
                                "Sec-WebSocket-Version", "13");
   soup_message_headers_append (priv->hs->request_headers,
                                "Origin", "null");
+  /* TODO: Not sure what to put here... */
   soup_message_headers_append (priv->hs->request_headers,
                                "Sec-WebSocket-Extensions",
                                "x-webkit-deflate-frame");
@@ -942,17 +940,6 @@ build_handshake (SoupWebsocket *socket, SoupURI *uri)
   if (uri_host != uri->host)
     g_free (uri_host);
 
-  /* *encoding = soup_message_headers_get_encoding (priv->hs->request_headers); */
-  /* if ((*encoding == SOUP_ENCODING_CONTENT_LENGTH || */
-  /*      *encoding == SOUP_ENCODING_NONE) && */
-  /*     (priv->hs->request_body->length > 0 || */
-  /*      soup_message_headers_get_one (priv->hs->request_headers, "Content-Type")) && */
-  /*     !soup_message_headers_get_content_length (priv->hs->request_headers)) { */
-  /*   *encoding = SOUP_ENCODING_CONTENT_LENGTH; */
-  /*   soup_message_headers_set_content_length (priv->hs->request_headers, */
-  /*                                            priv->hs->request_body->length); */
-  /* } */
-
   soup_message_headers_iter_init (&iter, priv->hs->request_headers);
   while (soup_message_headers_iter_next (&iter, &name, &value))
     g_string_append_printf (priv->hs_str, "%s: %s\r\n", name, value);
-- 
1.7.9.5

